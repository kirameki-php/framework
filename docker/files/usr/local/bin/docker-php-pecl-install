#!/bin/sh

set -e

# prefer user supplied CFLAGS, but default to our PHP_CFLAGS
: ${CFLAGS:=$PHP_CFLAGS}
: ${CPPFLAGS:=$PHP_CPPFLAGS}
: ${LDFLAGS:=$PHP_LDFLAGS}
export CFLAGS CPPFLAGS LDFLAGS

ext="$1"
shift

# バージョンを外したものがパスなどに必要
ext_without_ver=${ext%-*}

# ビルドに使う tmp ディレクトリー
tmp_dir="/tmp/pear/temp/$ext_without_ver"

# 必要な apk が入っていなかったら入れる
apk_del=
if [ -n "$PHPIZE_DEPS" ] && ! apk info --installed .phpize-deps > /dev/null; then
	apk add --no-cache --virtual .phpize-deps $PHPIZE_DEPS
	apk_del='.phpize-deps'
fi
if [ -n "$PECL_INSTALL_DEPS" ] && ! apk info --installed .pecl-install-deps > /dev/null; then
	apk add --no-cache --virtual .pecl-install-deps $PECL_INSTALL_DEPS
	apk_del="${apk_del} .pecl-install-deps"
fi

# pecl は環境変数から読み取ってくれないのでここでセットする。
# ちなみに peclではなく pear でセットしないとうまくいかない謎バグがある。
if [[ ! -z "${HTTP_PROXY}" ]]; then
	pear config-set http_proxy ${HTTP_PROXY};
fi

# phpredis の msgpack や igbinary を有効化する設定は時前でビルドしないと入らない仕様になっているので
# pecl install で直接入れるのではなく一度ソースを落として自分で configure -> make する。
pecl install --onlyreqdeps --nobuild $ext
cd "$tmp_dir"
phpize
./configure --enable-option-checking=fatal "$@"
make -j $(nproc) && make install

# proxy設定を元に戻しておいてあげる。
if [[ ! -z "${HTTP_PROXY}" ]]; then
	pear config-set http_proxy none;
fi

# ini ファイルなどを配置して有効化する
docker-php-ext-enable "$ext_without_ver"

# かなりファイルサイズを減らせるバイナリーのシンボルを strip する (grpc とか 120MB -> 6MB とかになる)
ext_dir="$(php -d 'display_errors=stderr' -r 'echo ini_get("extension_dir");')"
so_file_path="$ext_dir/$ext_without_ver.so"
chmod +x "$so_file_path"
strip -s "$so_file_path"

# 使い終わった tmp 系ファイル達のお掃除
rm -rf "$tmp_dir"

# 使い終わった apk をお掃除
if [ -n "$apk_del" ]; then
	apk del --purge --no-network $apk_del
fi
